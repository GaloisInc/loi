-- # -*- mode: haskell -*-

-- LOI implementation in Ivory

int32_t stanag_BROADCAST_ID = 0xFFFFFFFF;
max_NUM_CUCS  = 6;

uint8_t loi_2 = 0x01;
uint8_t loi_3 = 0x02;
uint8_t loi_4 = 0x04;
uint8_t loi_5 = 0x08;

--------------------------------------------------------------------------------
-- XXX Made up definitions for now

-- Startup config values
mVehicleType    = 0;
mVehicleSubType = 0;

struct Component {
 int32_t next;
 bool nextValid;
 ix_t 6 auth_idx;
}

--------------------------------------------------------------------------------

G* struct VsmAuthorizationResponse findResponse(int32_t cucsID) {

  map ix {
    if ((&responses)@ix -> V.cucsId == cucsID) {
      return (&responses)@ix;
    } else {}
  }
  return &nullResponse;
}

int32_t getActiveCUCSCount() {
  alloc *cnt = 0;
  map ix {
    if ((&responses)@ix -> V.cucsId != 0) {
      store cnt as *cnt + 1;
    } else {}
  }
  return *cnt;
}

G* struct VsmAuthorizationResponse getCucsAuthorization(int32_t cucsID) {

  if (( 0 == cucsID)  || (cucsID == stanag_BROADCAST_ID)) {
     return &nullResponse;
  } else {}

  let response = findResponse(cucsID);
  if (response->V.cucsId == 0) {
    if (getActiveCUCSCount() == max_NUM_CUCS) {
      return &nullResponse;
    } else {}

    store response.V.cucsId         as cucsID;
    store response.V.vehicleType    as mVehicleType;
    store response.V.vehicleSubtype as mVehicleSubType;

  } else {}

  -- everyone can get 2
  alloc *authorized = loi_2;

  -- check if cucs has or can get 3
  map ii {
    let station_idx = (&mStations)@ii->auth_idx;
    if (!((&mStations)@ii -> nextValid)) { }
    else {
      if (   (&responses)@station_idx -> V.cucsId == 0
          || (&responses)@station_idx -> V.cucsId == cucsID) {
        store authorized as (*authorized | loi_3);
      } else {}
    }
  }

  let vehicle_idx = (&mVehicle)->auth_idx;
  if (   (&responses)@vehicle_idx -> V.cucsId == 0
      || (&responses)@vehicle_idx -> V.cucsId == cucsID) {
    store authorized as  (*authorized | loi_4 | loi_5);
  }
  else {}

  store response.V.loiAuthorized as *authorized;

  return response;
}
