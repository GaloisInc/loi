-- # -*- mode: haskell -*-

include loiModule

-- LOI implementation in Ivory

int32_t stanag_BROADCAST_ID = -1;
max_NUM_CUCS  = 6;

uint8_t loi_2 = 0x01;
uint8_t loi_3 = 0x02;
uint8_t loi_4 = 0x04;
uint8_t loi_5 = 0x08;

--------------------------------------------------------------------------------
-- XXX Made up definitions for now

-- Startup config values
mVehicleType    = 0;
mVehicleSubType = 0;

--------------------------------------------------------------------------------

G* struct VsmAuthorizationResponse findResponse(int32_t cucsID) {

  map ix {
    if ((&mActiveCucs)@ix -> V.cucsId == cucsID) {
      return (&mActiveCucs)@ix;
    } else {}
  }
  return &noResponse;
}

int32_t getActiveCUCSCount() {
  alloc *cnt = 0;
  map ix {
    if ((&mActiveCucs)@ix -> V.cucsId != 0) {
      store cnt as *cnt + 1;
    } else {}
  }
  return *cnt;
}

G* struct VsmAuthorizationResponse getCucsAuthorization(int32_t cucsID) {

  if (( 0 == cucsID)  || (cucsID == stanag_BROADCAST_ID)) {
     return &noResponse;
  } else {}

  let response = findResponse(cucsID);
  if (response->V.cucsId == 0) {
    if (getActiveCUCSCount() == max_NUM_CUCS) {
      return &noResponse;
    } else {}

    store response.V.cucsId         as cucsID;
    store response.V.vehicleType    as mVehicleType;
    store response.V.vehicleSubtype as mVehicleSubType;

  } else {}

  -- everyone can get 2
  alloc *authorized = loi_2;

  -- check if cucs has or can get 3
  map ii {
	-- if station doesn't exist, can't get 3 here
    if (!((&mStations)@ii -> nextValid)) { }
    else {
	  let stationCucs = ((&mActiveCucs)@((&mStations)@ii->auth_idx))->V.cucsId;
      if (stationCucs == 0 || stationCucs == cucsID) {
        store authorized as (*authorized | loi_3);
      } else {}
    }
  }

  let vehicleCucs = ((&mActiveCucs)@((&mVehicle)->auth_idx))->V.cucsId;
  if (vehicleCucs == 0 || vehicleCucs == cucsID) {
    store authorized as  (*authorized | loi_4 | loi_5);
  }
  else {}

  store response.V.loiAuthorized as *authorized;

  let jj = 2;
  let test1 = (&mActiveCucs)@jj;
  -- let test2 = &mActiveCucs[2];

  return response;
}
