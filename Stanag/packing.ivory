-- # -*- mode: haskell -*-

include serializeModule 

type Index = uint32_t;
string struct Stanag 33
string struct Stanaglong 400

------------------------------------------------------------
-- Packing

void packInt32(int32_t v, *StanagBuf buf, Index ix) {
  $pack(toCArray(buf), ix, v);
}

void packUint8(uint8_t v, *StanagBuf buf, Index ix) {
  $pack(toCArray(buf), ix, v);
}

void packUint16(uint16_t v, *StanagBuf buf, Index ix) {
  $pack(toCArray(buf), ix, v);
}

void packUint32(uint32_t v, *StanagBuf buf, Index ix) {
  $pack(toCArray(buf), ix, v);
}

void packDouble(double v, *StanagBuf buf, Index ix) {
  $pack(toCArray(buf), ix, v);
}

void packStanagString(* struct ivory_string_Stanag str, *StanagBuf buf, Index ix, int32_t size) {
  len <- $istr_len(const(str));
  upTo toIx(len) ix' {
    let x = str.stringDataL[ix'];
    $pack(toCArray(buf), $packIxAdd(ix, ix'), x);
  }
}

------------------------------------------------------------
-- Unpacking

uint8_t unpackUint8(*StanagBuf buf, Index ix) {
  x <- $unpack(const(toCArray(buf)), ix);
  return x;
}

uint16_t unpackUint16(*StanagBuf buf, Index ix) {
  x <- $unpack(const(toCArray(buf)), ix);
  return x;
}

uint32_t unpackUint32(*StanagBuf buf, Index ix) {
  x <- $unpack(const(toCArray(buf)), ix);
  return x;
}

int16_t unpackInt16(*StanagBuf buf, Index ix) {
  x <- $unpack(const(toCArray(buf)), ix);
  return x;
}

int32_t unpackInt32(*StanagBuf buf, Index ix) {
  x <- $unpack(const(toCArray(buf)), ix);
  return x;
}

double unpackDouble(*StanagBuf buf, Index ix) {
  x <- $unpack(const(toCArray(buf)), ix);
  return x;
}

void unpackStanagString( * struct ivory_string_Stanag str , * StanagBuf buf , Index ix, int32_t size)
{
  len <- $istr_len(const(str));
  upTo toIx(len) ix' {
    x <- $unpack(const(toCArray(buf)), $packIxAdd(ix, ix'));
    store (str.stringDataL)@ix' as x;
  }
}
