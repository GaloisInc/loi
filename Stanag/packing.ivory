-- # -*- mode: haskell -*-

include serializeModule

type Index = uint32_t;
string struct Stanag 33
string struct Stanaglong 400

------------------------------------------------------------
-- Common Fields

 int32_t c_STANAG_BROADCAST_ID = -1;
uint32_t c_TYPE_OFFSET = 14;
uint32_t c_VEHICLEID_OFFSET = 38;
uint32_t c_CUCS_OFFSET = 42;

uint32_t stanagGetType(*StanagBuf buf) { return unpackUint32(buf, c_TYPE_OFFSET); }
 int32_t stanagGetVehicleId(*StanagBuf buf) { return unpackInt32(buf, c_VEHICLEID_OFFSET); }
 int32_t stanagGetCucs(*StanagBuf buf) { return unpackInt32(buf, c_CUCS_OFFSET); }


------------------------------------------------------------
-- Checksum

bool verifyChecksum(*StanagBuf buf, uint32_t len)
{
    let bound = len - 4;
    let tomatch = unpackUint32(buf, bound);
    return (stanagChecksum(buf, len) == tomatch);
}

void placeChecksum(*StanagBuf buf, uint32_t len)
{
    let bound = len - 4;
    let check = stanagChecksum(buf, len);
    packUint32(check, buf, bound);
}

uint32_t stanagChecksum(*StanagBuf buf, uint32_t len)
{
    let bound = len - 4;
    alloc *check = 0;

    let ix_t 576 boundIx = toIx(twosCompCast(bound));
    upTo boundIx ix {
        let uint32_t data = safeCast(buf[ix]);
        store check as *check + data;
    }

    return *check;
}

------------------------------------------------------------
-- Packing

void packInt16(int16_t v, *StanagBuf buf, Index ix) {
  $pack(toCArray(buf), ix, v);
}

void packInt32(int32_t v, *StanagBuf buf, Index ix) {
  $pack(toCArray(buf), ix, v);
}

void packUint8(uint8_t v, *StanagBuf buf, Index ix) {
  $pack(toCArray(buf), ix, v);
}

void packUint16(uint16_t v, *StanagBuf buf, Index ix) {
  $pack(toCArray(buf), ix, v);
}

void packUint32(uint32_t v, *StanagBuf buf, Index ix) {
  $pack(toCArray(buf), ix, v);
}

void packFloat(float v, *StanagBuf buf, Index ix) {
  $pack(toCArray(buf), ix, v);
}

void packDouble(double v, *StanagBuf buf, Index ix) {
  $pack(toCArray(buf), ix, v);
}

void packStanagString(* struct ivory_string_Stanag str, *StanagBuf buf, Index ix, int32_t size) {
  len <- $istr_len(const(str));
  upTo toIx(len) ix' {
    let x = str.stringDataL[ix'];
    $pack(toCArray(buf), $packIxAdd(ix, ix'), x);
  }
}

------------------------------------------------------------
-- Unpacking

uint8_t unpackUint8(*StanagBuf buf, Index ix) {
  x <- $unpack(const(toCArray(buf)), ix);
  return x;
}

uint16_t unpackUint16(*StanagBuf buf, Index ix) {
  x <- $unpack(const(toCArray(buf)), ix);
  return x;
}

uint32_t unpackUint32(*StanagBuf buf, Index ix) {
  x <- $unpack(const(toCArray(buf)), ix);
  return x;
}

int16_t unpackInt16(*StanagBuf buf, Index ix) {
  x <- $unpack(const(toCArray(buf)), ix);
  return x;
}

int32_t unpackInt32(*StanagBuf buf, Index ix) {
  x <- $unpack(const(toCArray(buf)), ix);
  return x;
}

float unpackFloat(*StanagBuf buf, Index ix) {
  x <- $unpack(const(toCArray(buf)), ix);
  return x;
}

double unpackDouble(*StanagBuf buf, Index ix) {
  x <- $unpack(const(toCArray(buf)), ix);
  return x;
}

void unpackStanagString( * struct ivory_string_Stanag str , * StanagBuf buf , Index ix, int32_t size)
{
  len <- $istr_len(const(str));
  upTo toIx(len) ix' {
    x <- $unpack(const(toCArray(buf)), $packIxAdd(ix, ix'));
    store (str.stringDataL)@ix' as x;
  }
}
