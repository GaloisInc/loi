include stanagpacking

struct EoIrConfigurationState
{
 struct ivory_string_Stanag idd;
 uint32_t messageInstance;
 uint32_t messageType;
 int32_t messageLength;
 int32_t streamId;
 int32_t packetSequenceNumber;
 double timeStamp;
 int32_t vehicleId;
 int32_t cucsId;
 int32_t vsmId;
 uint32_t stationNumber;
 struct ivory_string_Stanag eoIrType;
 uint8_t eoIrTypeRevisionLevel;
 int16_t eoVerticalImageDimension;
 int16_t eoHorizontalImageDimension;
 int16_t irVerticalImageDimension;
 int16_t irHorizontalImageDimension;
 float fieldOfRegardElevationMin;
 float fieldOfRegardElevationMax;
 float fieldOfRegardAzimuthMin;
 float fieldOfRegardAzimuthMax;
}




uint32_t eoIrConfigurationStateMsgNum = 301;
uint32_t eoIrConfigurationStateMsgLen = 63;
uint32_t eoIrConfigurationStateLength = 97;


void eoIrConfigurationState_unpack(*StanagBuf buf, * struct EoIrConfigurationState msg)
{
  unpackStanagString(msg.idd, buf, 0, 10);
  store msg.messageInstance as unpackUint32(buf, 10);
  store msg.messageType as unpackUint32(buf, 14);
  store msg.messageLength as unpackInt32(buf, 18);
  store msg.streamId as unpackInt32(buf, 22);
  store msg.packetSequenceNumber as unpackInt32(buf, 26);
  store msg.timeStamp as unpackDouble(buf, 30);
  store msg.vehicleId as unpackInt32(buf, 38);
  store msg.cucsId as unpackInt32(buf, 42);
  store msg.vsmId as unpackInt32(buf, 46);
  store msg.stationNumber as unpackUint32(buf, 50);
  unpackStanagString(msg.eoIrType, buf, 54, 14);
  store msg.eoIrTypeRevisionLevel as unpackUint8(buf, 68);
  store msg.eoVerticalImageDimension as unpackInt16(buf, 69);
  store msg.eoHorizontalImageDimension as unpackInt16(buf, 71);
  store msg.irVerticalImageDimension as unpackInt16(buf, 73);
  store msg.irHorizontalImageDimension as unpackInt16(buf, 75);
  store msg.fieldOfRegardElevationMin as unpackFloat(buf, 77);
  store msg.fieldOfRegardElevationMax as unpackFloat(buf, 81);
  store msg.fieldOfRegardAzimuthMin as unpackFloat(buf, 85);
  store msg.fieldOfRegardAzimuthMax as unpackFloat(buf, 89);

  if (msg->eoIrTypeRevisionLevel < 0) {
     logger(2, "eoIrTypeRevisionLevel was below min");
     store msg.eoIrTypeRevisionLevel as 0;
  } else {}
  if (msg->eoIrTypeRevisionLevel > 255) {
     logger(2, "eoIrTypeRevisionLevel was above max");
     store msg.eoIrTypeRevisionLevel as 255;
  } else {}
  if (msg->fieldOfRegardElevationMin < -pi) {
     logger(2, "fieldOfRegardElevationMin was below min");
     store msg.fieldOfRegardElevationMin as -pi;
  } else {}
  if (msg->fieldOfRegardElevationMin > pi) {
     logger(2, "fieldOfRegardElevationMin was above max");
     store msg.fieldOfRegardElevationMin as pi;
  } else {}
  if (msg->fieldOfRegardElevationMax < -pi) {
     logger(2, "fieldOfRegardElevationMax was below min");
     store msg.fieldOfRegardElevationMax as -pi;
  } else {}
  if (msg->fieldOfRegardElevationMax > pi) {
     logger(2, "fieldOfRegardElevationMax was above max");
     store msg.fieldOfRegardElevationMax as pi;
  } else {}
  if (msg->fieldOfRegardAzimuthMin < -pi) {
     logger(2, "fieldOfRegardAzimuthMin was below min");
     store msg.fieldOfRegardAzimuthMin as -pi;
  } else {}
  if (msg->fieldOfRegardAzimuthMin > pi) {
     logger(2, "fieldOfRegardAzimuthMin was above max");
     store msg.fieldOfRegardAzimuthMin as pi;
  } else {}
  if (msg->fieldOfRegardAzimuthMax < -pi) {
     logger(2, "fieldOfRegardAzimuthMax was below min");
     store msg.fieldOfRegardAzimuthMax as -pi;
  } else {}
  if (msg->fieldOfRegardAzimuthMax > pi) {
     logger(2, "fieldOfRegardAzimuthMax was above max");
     store msg.fieldOfRegardAzimuthMax as pi;
  } else {}
}


void eoIrConfigurationState_headerSet(* struct EoIrConfigurationState msg)
{
  store (&eoIrConfigurationStateInstance) as *(&eoIrConfigurationStateInstance) + 1;
  store msg.messageInstance as *(&eoIrConfigurationStateInstance);
  store msg.messageType as 301;
  store msg.messageLength as 63;
  store msg.streamId as -1;
  store msg.packetSequenceNumber as -1;
}


void eoIrConfigurationState_pack(* struct EoIrConfigurationState msg, *StanagBuf buf)
{
  if (msg->eoIrTypeRevisionLevel < 0) {
     logger(2, "eoIrTypeRevisionLevel was below min");
     store msg.eoIrTypeRevisionLevel as 0;
  } else {}
  if (msg->eoIrTypeRevisionLevel > 255) {
     logger(2, "eoIrTypeRevisionLevel was above max");
     store msg.eoIrTypeRevisionLevel as 255;
  } else {}
  if (msg->fieldOfRegardElevationMin < -pi) {
     logger(2, "fieldOfRegardElevationMin was below min");
     store msg.fieldOfRegardElevationMin as -pi;
  } else {}
  if (msg->fieldOfRegardElevationMin > pi) {
     logger(2, "fieldOfRegardElevationMin was above max");
     store msg.fieldOfRegardElevationMin as pi;
  } else {}
  if (msg->fieldOfRegardElevationMax < -pi) {
     logger(2, "fieldOfRegardElevationMax was below min");
     store msg.fieldOfRegardElevationMax as -pi;
  } else {}
  if (msg->fieldOfRegardElevationMax > pi) {
     logger(2, "fieldOfRegardElevationMax was above max");
     store msg.fieldOfRegardElevationMax as pi;
  } else {}
  if (msg->fieldOfRegardAzimuthMin < -pi) {
     logger(2, "fieldOfRegardAzimuthMin was below min");
     store msg.fieldOfRegardAzimuthMin as -pi;
  } else {}
  if (msg->fieldOfRegardAzimuthMin > pi) {
     logger(2, "fieldOfRegardAzimuthMin was above max");
     store msg.fieldOfRegardAzimuthMin as pi;
  } else {}
  if (msg->fieldOfRegardAzimuthMax < -pi) {
     logger(2, "fieldOfRegardAzimuthMax was below min");
     store msg.fieldOfRegardAzimuthMax as -pi;
  } else {}
  if (msg->fieldOfRegardAzimuthMax > pi) {
     logger(2, "fieldOfRegardAzimuthMax was above max");
     store msg.fieldOfRegardAzimuthMax as pi;
  } else {}

  packStanagString(msg.idd, buf, 0, 10);
  packUint32(msg->messageInstance, buf, 10);
  packUint32(msg->messageType, buf, 14);
  packInt32(msg->messageLength, buf, 18);
  packInt32(msg->streamId, buf, 22);
  packInt32(msg->packetSequenceNumber, buf, 26);
  packDouble(msg->timeStamp, buf, 30);
  packInt32(msg->vehicleId, buf, 38);
  packInt32(msg->cucsId, buf, 42);
  packInt32(msg->vsmId, buf, 46);
  packUint32(msg->stationNumber, buf, 50);
  packStanagString(msg.eoIrType, buf, 54, 14);
  packUint8(msg->eoIrTypeRevisionLevel, buf, 68);
  packInt16(msg->eoVerticalImageDimension, buf, 69);
  packInt16(msg->eoHorizontalImageDimension, buf, 71);
  packInt16(msg->irVerticalImageDimension, buf, 73);
  packInt16(msg->irHorizontalImageDimension, buf, 75);
  packFloat(msg->fieldOfRegardElevationMin, buf, 77);
  packFloat(msg->fieldOfRegardElevationMax, buf, 81);
  packFloat(msg->fieldOfRegardAzimuthMin, buf, 85);
  packFloat(msg->fieldOfRegardAzimuthMax, buf, 89);
}


