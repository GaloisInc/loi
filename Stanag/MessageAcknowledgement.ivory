include stanagpacking

struct MessageAcknowledgement
{
 struct ivory_string_Stanag idd;
 uint32_t messageInstance;
 uint32_t messageType;
 int32_t messageLength;
 int32_t streamId;
 int32_t packetSequenceNumber;
 double timeStamp;
 int32_t vehicleId;
 int32_t cucsId;
 int32_t vsmId;
 int32_t dataLinkId;
 double originalMessageTimeStamp;
 uint32_t originalMessageInstanceId;
 uint32_t originalMessageType;
}


uint32_t messageAcknowledgementMsgNum = 1400;
uint32_t messageAcknowledgementMsgLen = 40;
uint32_t messageAcknowledgementLength = 74;


--void messageAcknowledgementCreateFrom(*StanagBuf msgbuf, *StanagBuf buf, int32_t myid)
--{
--	alloc ack{};
--
--	store ack.originalMessageTimeStamp as msg->C.timeStamp;
--	store ack.originalMessageInstanceId as msg->C.messageInstance;
--	store ack.originalMessageType as msg->C.messageType;
--	store ack.cucsId as msg->C.cucsId;
--	store ack.timeStamp as timestamp(); -- double timestamp
--	store ack.vehicleId as myid;
--	store ack.vsmId as myid;
--
--	messageAcknowledgement_headerSet(ack);
--	messageAcknowledgement_pack(ack, buf);
--	placeChecksum(buf, messageAcknowledgementLength);
--	sendToCucs(buf, messageAcknowledgementLength);
--}


void messageAcknowledgement_unpack(*StanagBuf buf, * struct MessageAcknowledgement msg)
{
  unpackStanagString(msg.idd, buf, 0, 10);
  store msg.messageInstance as unpackUint32(buf, 10);
  store msg.messageType as unpackUint32(buf, 14);
  store msg.messageLength as unpackInt32(buf, 18);
  store msg.streamId as unpackInt32(buf, 22);
  store msg.packetSequenceNumber as unpackInt32(buf, 26);
  store msg.timeStamp as unpackDouble(buf, 30);
  store msg.vehicleId as unpackInt32(buf, 38);
  store msg.cucsId as unpackInt32(buf, 42);
  store msg.vsmId as unpackInt32(buf, 46);
  store msg.dataLinkId as unpackInt32(buf, 50);
  store msg.originalMessageTimeStamp as unpackDouble(buf, 54);
  store msg.originalMessageInstanceId as unpackUint32(buf, 62);
  store msg.originalMessageType as unpackUint32(buf, 66);
}


void messageAcknowledgement_headerSet(* struct MessageAcknowledgement msg)
{
  store (&messageAcknowledgementInstance) as *(&messageAcknowledgementInstance) + 1;
  store msg.messageInstance as *(&messageAcknowledgementInstance);
  store msg.messageType as 1400;
  store msg.messageLength as 40;
  store msg.streamId as -1;
  store msg.packetSequenceNumber as -1;
}


void messageAcknowledgement_pack(* struct MessageAcknowledgement msg, *StanagBuf buf)
{
  packStanagString(msg.idd, buf, 0, 10);
  packUint32(msg->messageInstance, buf, 10);
  packUint32(msg->messageType, buf, 14);
  packInt32(msg->messageLength, buf, 18);
  packInt32(msg->streamId, buf, 22);
  packInt32(msg->packetSequenceNumber, buf, 26);
  packDouble(msg->timeStamp, buf, 30);
  packInt32(msg->vehicleId, buf, 38);
  packInt32(msg->cucsId, buf, 42);
  packInt32(msg->vsmId, buf, 46);
  packInt32(msg->dataLinkId, buf, 50);
  packDouble(msg->originalMessageTimeStamp, buf, 54);
  packUint32(msg->originalMessageInstanceId, buf, 62);
  packUint32(msg->originalMessageType, buf, 66);
}


