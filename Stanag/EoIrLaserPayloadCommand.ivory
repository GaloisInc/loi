include stanagpacking

struct EoIrLaserPayloadCommand
{
 struct ivory_string_Stanag idd;
 uint32_t messageInstance;
 uint32_t messageType;
 int32_t messageLength;
 int32_t streamId;
 int32_t packetSequenceNumber;
 double timeStamp;
 int32_t vehicleId;
 int32_t cucsId;
 uint32_t stationNumber;
 uint8_t addressedSensor;
 uint8_t systemOperatingMode;
 uint8_t setEoSensorMode;
 uint8_t setIrPolarity;
 uint8_t imageOutput;
 uint8_t setEoIrPointingMode;
 uint8_t fireLaserPointerRangefinder;
 uint8_t selectLaserRangefinder;
 uint16_t setLaserDesignatorCode;
 uint8_t initiateLaserDesignator;
 uint8_t preplanMode;
}


uint32_t eoIrLaserPayloadCommandMsgNum = 201;
uint32_t eoIrLaserPayloadCommandMsgLen = 32;
uint32_t eoIrLaserPayloadCommandLength = 66;


void eoIrLaserPayloadCommand_unpack(*StanagBuf buf, * struct EoIrLaserPayloadCommand msg)
{
  unpackStanagString(msg.idd, buf, 0, 10);
  store msg.messageInstance as unpackUint32(buf, 10);
  store msg.messageType as unpackUint32(buf, 14);
  store msg.messageLength as unpackInt32(buf, 18);
  store msg.streamId as unpackInt32(buf, 22);
  store msg.packetSequenceNumber as unpackInt32(buf, 26);
  store msg.timeStamp as unpackDouble(buf, 30);
  store msg.vehicleId as unpackInt32(buf, 38);
  store msg.cucsId as unpackInt32(buf, 42);
  store msg.stationNumber as unpackUint32(buf, 46);
  store msg.addressedSensor as unpackUint8(buf, 50);
  store msg.systemOperatingMode as unpackUint8(buf, 51);
  store msg.setEoSensorMode as unpackUint8(buf, 52);
  store msg.setIrPolarity as unpackUint8(buf, 53);
  store msg.imageOutput as unpackUint8(buf, 54);
  store msg.setEoIrPointingMode as unpackUint8(buf, 55);
  store msg.fireLaserPointerRangefinder as unpackUint8(buf, 56);
  store msg.selectLaserRangefinder as unpackUint8(buf, 57);
  store msg.setLaserDesignatorCode as unpackUint16(buf, 58);
  store msg.initiateLaserDesignator as unpackUint8(buf, 60);
  store msg.preplanMode as unpackUint8(buf, 61);
}


void eoIrLaserPayloadCommand_headerSet(* struct EoIrLaserPayloadCommand msg)
{
  store (&eoIrLaserPayloadCommandInstance) as *(&eoIrLaserPayloadCommandInstance) + 1;
  store msg.messageInstance as *(&eoIrLaserPayloadCommandInstance);
  store msg.messageType as 201;
  store msg.messageLength as 32;
  store msg.streamId as -1;
  store msg.packetSequenceNumber as -1;
}


void eoIrLaserPayloadCommand_pack(* struct EoIrLaserPayloadCommand msg, *StanagBuf buf)
{
  packStanagString(msg.idd, buf, 0, 10);
  packUint32(msg->messageInstance, buf, 10);
  packUint32(msg->messageType, buf, 14);
  packInt32(msg->messageLength, buf, 18);
  packInt32(msg->streamId, buf, 22);
  packInt32(msg->packetSequenceNumber, buf, 26);
  packDouble(msg->timeStamp, buf, 30);
  packInt32(msg->vehicleId, buf, 38);
  packInt32(msg->cucsId, buf, 42);
  packUint32(msg->stationNumber, buf, 46);
  packUint8(msg->addressedSensor, buf, 50);
  packUint8(msg->systemOperatingMode, buf, 51);
  packUint8(msg->setEoSensorMode, buf, 52);
  packUint8(msg->setIrPolarity, buf, 53);
  packUint8(msg->imageOutput, buf, 54);
  packUint8(msg->setEoIrPointingMode, buf, 55);
  packUint8(msg->fireLaserPointerRangefinder, buf, 56);
  packUint8(msg->selectLaserRangefinder, buf, 57);
  packUint16(msg->setLaserDesignatorCode, buf, 58);
  packUint8(msg->initiateLaserDesignator, buf, 60);
  packUint8(msg->preplanMode, buf, 61);
}


