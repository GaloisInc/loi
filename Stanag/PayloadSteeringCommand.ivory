include stanagpacking

struct PayloadSteeringCommand
{
 struct ivory_string_Stanag idd;
 uint32_t messageInstance;
 uint32_t messageType;
 int32_t messageLength;
 int32_t streamId;
 int32_t packetSequenceNumber;
 double timeStamp;
 int32_t vehicleId;
 int32_t cucsId;
 uint32_t stationNumber;
 float setCentrelineAzimuthAngle;
 float setCentrelineElevationAngle;
 uint8_t setZoom;
 float setHorizontalFieldOfView;
 float setVerticalFieldOfView;
 float horizontalSlewRate;
 float verticalSlewRate;
 double latitude;
 double longitude;
 float altitude;
 uint8_t altitudeType;
 uint8_t setFocus;
 uint8_t focusType;
}


c_USESETHORIZONTALANDVERTICALFIELDOFVIEW = 0x0;
c_XNOCHANGE = 0x1;
c_ZOOMIN = 0x2;
c_ZOOMOUT = 0x3;
c_BAROALTITUDE = 0x1;
c_WGS84 = 0x3;
c_YNOCHANGE = 0x0;
c_FOCUSCLOSER = 0x1;
c_FOCUSFARTHER = 0x2;
c_AUTO = 0x0;
c_MANUAL = 0x1;


uint32_t payloadSteeringCommandMsgNum = 200;
uint32_t payloadSteeringCommandMsgLen = 68;
uint32_t payloadSteeringCommandLength = 102;


void payloadSteeringCommand_unpack(*StanagBuf buf, * struct PayloadSteeringCommand msg)
{
  unpackStanagString(msg.idd, buf, 0, 10);
  store msg.messageInstance as unpackUint32(buf, 10);
  store msg.messageType as unpackUint32(buf, 14);
  store msg.messageLength as unpackInt32(buf, 18);
  store msg.streamId as unpackInt32(buf, 22);
  store msg.packetSequenceNumber as unpackInt32(buf, 26);
  store msg.timeStamp as unpackDouble(buf, 30);
  store msg.vehicleId as unpackInt32(buf, 38);
  store msg.cucsId as unpackInt32(buf, 42);
  store msg.stationNumber as unpackUint32(buf, 46);
  store msg.setCentrelineAzimuthAngle as unpackFloat(buf, 50);
  store msg.setCentrelineElevationAngle as unpackFloat(buf, 54);
  store msg.setZoom as unpackUint8(buf, 58);
  store msg.setHorizontalFieldOfView as unpackFloat(buf, 59);
  store msg.setVerticalFieldOfView as unpackFloat(buf, 63);
  store msg.horizontalSlewRate as unpackFloat(buf, 67);
  store msg.verticalSlewRate as unpackFloat(buf, 71);
  store msg.latitude as unpackDouble(buf, 75);
  store msg.longitude as unpackDouble(buf, 83);
  store msg.altitude as unpackFloat(buf, 91);
  store msg.altitudeType as unpackUint8(buf, 95);
  store msg.setFocus as unpackUint8(buf, 96);
  store msg.focusType as unpackUint8(buf, 97);

  if (msg->setCentrelineAzimuthAngle < -pi) {
     logger(2, "setCentrelineAzimuthAngle was below min");
     store msg.setCentrelineAzimuthAngle as -pi;
  } else {}
  if (msg->setCentrelineAzimuthAngle > pi) {
     logger(2, "setCentrelineAzimuthAngle was above max");
     store msg.setCentrelineAzimuthAngle as pi;
  } else {}
  if (msg->setCentrelineElevationAngle < -pi) {
     logger(2, "setCentrelineElevationAngle was below min");
     store msg.setCentrelineElevationAngle as -pi;
  } else {}
  if (msg->setCentrelineElevationAngle > pi) {
     logger(2, "setCentrelineElevationAngle was above max");
     store msg.setCentrelineElevationAngle as pi;
  } else {}
  if (msg->setHorizontalFieldOfView < 0) {
     logger(2, "setHorizontalFieldOfView was below min");
     store msg.setHorizontalFieldOfView as 0;
  } else {}
  if (msg->setHorizontalFieldOfView > 2*pi) {
     logger(2, "setHorizontalFieldOfView was above max");
     store msg.setHorizontalFieldOfView as 2*pi;
  } else {}
  if (msg->setVerticalFieldOfView < 0) {
     logger(2, "setVerticalFieldOfView was below min");
     store msg.setVerticalFieldOfView as 0;
  } else {}
  if (msg->setVerticalFieldOfView > 2*pi) {
     logger(2, "setVerticalFieldOfView was above max");
     store msg.setVerticalFieldOfView as 2*pi;
  } else {}
  if (msg->latitude < -pi/2) {
     logger(2, "latitude was below min");
     store msg.latitude as -pi/2;
  } else {}
  if (msg->latitude > pi/2) {
     logger(2, "latitude was above max");
     store msg.latitude as pi/2;
  } else {}
  if (msg->longitude < -pi) {
     logger(2, "longitude was below min");
     store msg.longitude as -pi;
  } else {}
  if (msg->longitude > pi) {
     logger(2, "longitude was above max");
     store msg.longitude as pi;
  } else {}
  if (msg->altitude < -1000) {
     logger(2, "altitude was below min");
     store msg.altitude as -1000;
  } else {}
  if (msg->altitude > 100000) {
     logger(2, "altitude was above max");
     store msg.altitude as 100000;
  } else {}
}


void payloadSteeringCommand_headerSet(* struct PayloadSteeringCommand msg)
{
  store (&payloadSteeringCommandInstance) as *(&payloadSteeringCommandInstance) + 1;
  store msg.messageInstance as *(&payloadSteeringCommandInstance);
  store msg.messageType as 200;
  store msg.messageLength as 68;
  store msg.streamId as -1;
  store msg.packetSequenceNumber as -1;
}


void payloadSteeringCommand_pack(* struct PayloadSteeringCommand msg, *StanagBuf buf)
{
  if (msg->setCentrelineAzimuthAngle < -pi) {
     logger(2, "setCentrelineAzimuthAngle was below min");
     store msg.setCentrelineAzimuthAngle as -pi;
  } else {}
  if (msg->setCentrelineAzimuthAngle > pi) {
     logger(2, "setCentrelineAzimuthAngle was above max");
     store msg.setCentrelineAzimuthAngle as pi;
  } else {}
  if (msg->setCentrelineElevationAngle < -pi) {
     logger(2, "setCentrelineElevationAngle was below min");
     store msg.setCentrelineElevationAngle as -pi;
  } else {}
  if (msg->setCentrelineElevationAngle > pi) {
     logger(2, "setCentrelineElevationAngle was above max");
     store msg.setCentrelineElevationAngle as pi;
  } else {}
  if (msg->setHorizontalFieldOfView < 0) {
     logger(2, "setHorizontalFieldOfView was below min");
     store msg.setHorizontalFieldOfView as 0;
  } else {}
  if (msg->setHorizontalFieldOfView > 2*pi) {
     logger(2, "setHorizontalFieldOfView was above max");
     store msg.setHorizontalFieldOfView as 2*pi;
  } else {}
  if (msg->setVerticalFieldOfView < 0) {
     logger(2, "setVerticalFieldOfView was below min");
     store msg.setVerticalFieldOfView as 0;
  } else {}
  if (msg->setVerticalFieldOfView > 2*pi) {
     logger(2, "setVerticalFieldOfView was above max");
     store msg.setVerticalFieldOfView as 2*pi;
  } else {}
  if (msg->latitude < -pi/2) {
     logger(2, "latitude was below min");
     store msg.latitude as -pi/2;
  } else {}
  if (msg->latitude > pi/2) {
     logger(2, "latitude was above max");
     store msg.latitude as pi/2;
  } else {}
  if (msg->longitude < -pi) {
     logger(2, "longitude was below min");
     store msg.longitude as -pi;
  } else {}
  if (msg->longitude > pi) {
     logger(2, "longitude was above max");
     store msg.longitude as pi;
  } else {}
  if (msg->altitude < -1000) {
     logger(2, "altitude was below min");
     store msg.altitude as -1000;
  } else {}
  if (msg->altitude > 100000) {
     logger(2, "altitude was above max");
     store msg.altitude as 100000;
  } else {}

  packStanagString(msg.idd, buf, 0, 10);
  packUint32(msg->messageInstance, buf, 10);
  packUint32(msg->messageType, buf, 14);
  packInt32(msg->messageLength, buf, 18);
  packInt32(msg->streamId, buf, 22);
  packInt32(msg->packetSequenceNumber, buf, 26);
  packDouble(msg->timeStamp, buf, 30);
  packInt32(msg->vehicleId, buf, 38);
  packInt32(msg->cucsId, buf, 42);
  packUint32(msg->stationNumber, buf, 46);
  packFloat(msg->setCentrelineAzimuthAngle, buf, 50);
  packFloat(msg->setCentrelineElevationAngle, buf, 54);
  packUint8(msg->setZoom, buf, 58);
  packFloat(msg->setHorizontalFieldOfView, buf, 59);
  packFloat(msg->setVerticalFieldOfView, buf, 63);
  packFloat(msg->horizontalSlewRate, buf, 67);
  packFloat(msg->verticalSlewRate, buf, 71);
  packDouble(msg->latitude, buf, 75);
  packDouble(msg->longitude, buf, 83);
  packFloat(msg->altitude, buf, 91);
  packUint8(msg->altitudeType, buf, 95);
  packUint8(msg->setFocus, buf, 96);
  packUint8(msg->focusType, buf, 97);
}


